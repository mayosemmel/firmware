
configure() {
	#add new peers
	add_wgpeer() {
		local name="$1"

		# prohibit cfg* as name
		if echo $name | grep cfg > /dev/null; then
			echo "ERROR: name $name is invalid for wireguardpeer!"
			exit 1
		fi

		# ensure name length
		if [ ${#name} -gt 15 ]; then
			echo "ERROR: name $name is too long!"
			exit 1
		fi

		# get rxcost
		if rxcost=$(uci -q get gateway.$name.rxcost); then
			rxcost="$rxcost"
		else
			rxcost=16384
		fi

		# add interface
		uci set network.$name=interface
		uci set network.$name.proto=wireguard
		uci set network.$name.fwmark='0xc8'
		if privkey=$(uci -q get gateway.$name.private_key); then
			uci set network.$name.private_key="$privkey"
		else
			privkey=$(wg genkey)
			uci set network.$name.private_key="$privkey"
			uci set gateway.$name.private_key="$privkey"
		fi
		echo "WIREGUARD: publickey for ${name}: $(echo $(uci get gateway.$name.private_key) | wg pubkey)"

		# configure wireguard
		if uci -q get network.@wireguard_$name[0] > /dev/null; then
			#config already exists
			cfg="@wireguard_$name[0]"
		else
			#create new config
			cfg=$(uci add network wireguard_$name)
		fi
		uci set network.$cfg.public_key="$(uci get gateway.$name.public_key)"
		uci set network.$cfg.endpoint_host="$(uci get gateway.$name.endpoint_host)"
		uci set network.$cfg.endpoint_port="$(uci get gateway.$name.endpoint_port)"
		uci set network.$cfg.persistent_keepalive="$(uci get gateway.$name.persistent_keepalive)"
		uci -q delete network.$cfg.allowed_ips
		uci add_list network.$cfg.allowed_ips='::/0'
		uci add_list network.$cfg.allowed_ips='0.0.0.0/0'

		# remove old addresses
		uci -q del network.$name.addresses

		# link local
		mac="$(cat "/sys/class/net/$SWITCHDEV/address")"
		uci add_list network.$name.addresses="$(ipEUIAssemble "fe80::/64" "$mac")"

		# add iif-rules
		uci set network.${name}_rule=rule
		uci set network.${name}_rule.in="$name"
		uci set network.${name}_rule.lookup='10'
		uci set network.${name}_rule.priority='31'

		uci set network.${name}_rule6=rule6
		uci set network.${name}_rule6.in="$name"
		uci set network.${name}_rule6.lookup='10'
		uci set network.${name}_rule6.priority='31'

		# peer_ip
		if peer_ip=$(uci -q get gateway.@gateway[0].peer_ip); then
			uci add_list network.$name.addresses="$peer_ip"
		elif peer_ip=$(uci -q get gateway.@client[0].ipaddr); then
			# use ipaddr (without subnet) if no peer_ip set
			uci add_list network.$name.addresses="$(echo $peer_ip | cut -d / -f1)"
		else
			echo "FATAL: Neither peer_ip nor ipaddr set! No peering ipv4 set!"
			exit 1
		fi

		# peer_ip6
		if peer_ip6=$(uci -q get gateway.@gateway[0].peer_ip6); then
			uci add_list network.$name.addresses=$peer_ip6
		fi

		# add babel interface
		uci set babeld.$name=interface
		uci set babeld.$name.ifname="$name"
		uci set babeld.$name.type='tunnel'
		uci set babeld.$name.rxcost=$rxcost
	}

	config_load gateway
	config_foreach add_wgpeer wireguardpeer
}

commit() {
	uci commit network
	uci commit babeld
	uci commit gateway
}

revert() {
	uci revert network
	uci revert babeld
	uci revert gateway
}
